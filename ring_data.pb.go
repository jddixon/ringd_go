// Code generated by protoc-gen-go.
// source: ring_data.proto
// DO NOT EDIT!

/*
Package ringd is a generated protocol buffer package.

It is generated from these files:
	ring_data.proto

It has these top-level messages:
	HostInfo
	RingData
*/
package ringd

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// we accept either information on a single host
type HostInfo struct {
	HostName   string `protobuf:"bytes,1,opt,name=host_name,json=hostName" json:"host_name,omitempty"`
	IpAddr     string `protobuf:"bytes,2,opt,name=ip_addr,json=ipAddr" json:"ip_addr,omitempty"`
	NodeId     string `protobuf:"bytes,3,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	PubKey     string `protobuf:"bytes,4,opt,name=pub_key,json=pubKey" json:"pub_key,omitempty"`
	PrivateKey string `protobuf:"bytes,5,opt,name=privateKey" json:"privateKey,omitempty"`
}

func (m *HostInfo) Reset()                    { *m = HostInfo{} }
func (m *HostInfo) String() string            { return proto.CompactTextString(m) }
func (*HostInfo) ProtoMessage()               {}
func (*HostInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HostInfo) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *HostInfo) GetIpAddr() string {
	if m != nil {
		return m.IpAddr
	}
	return ""
}

func (m *HostInfo) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *HostInfo) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *HostInfo) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

// ... or info on one or more hosts
type RingData struct {
	Hosts []*HostInfo `protobuf:"bytes,1,rep,name=hosts" json:"hosts,omitempty"`
}

func (m *RingData) Reset()                    { *m = RingData{} }
func (m *RingData) String() string            { return proto.CompactTextString(m) }
func (*RingData) ProtoMessage()               {}
func (*RingData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RingData) GetHosts() []*HostInfo {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func init() {
	proto.RegisterType((*HostInfo)(nil), "ringd.HostInfo")
	proto.RegisterType((*RingData)(nil), "ringd.ringData")
}

func init() { proto.RegisterFile("ring_data.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 201 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0xcf, 0x41, 0x4a, 0xc5, 0x30,
	0x10, 0xc6, 0x71, 0x62, 0x6d, 0x6d, 0xc7, 0x45, 0x21, 0x1b, 0x03, 0x82, 0x94, 0x82, 0xd0, 0x55,
	0x41, 0x3d, 0x81, 0xe0, 0xc2, 0x52, 0x70, 0xd1, 0x0b, 0x84, 0x29, 0x13, 0x35, 0x48, 0x93, 0x90,
	0xa6, 0x42, 0xaf, 0xf1, 0x4e, 0xfc, 0x48, 0xca, 0x83, 0xb7, 0x9c, 0xef, 0xb7, 0xf9, 0x0f, 0xd4,
	0x5e, 0x9b, 0x1f, 0x49, 0x18, 0xb0, 0x77, 0xde, 0x06, 0xcb, 0xf3, 0x38, 0x50, 0x7b, 0x62, 0x50,
	0x7e, 0xda, 0x35, 0x0c, 0xe6, 0xdb, 0xf2, 0x47, 0xa8, 0x7e, 0xed, 0x1a, 0xa4, 0xc1, 0x45, 0x09,
	0xd6, 0xb0, 0xae, 0x9a, 0xca, 0x38, 0x7c, 0xe1, 0xa2, 0xf8, 0x03, 0xdc, 0x69, 0x27, 0x91, 0xc8,
	0x8b, 0x9b, 0x44, 0x85, 0x76, 0xef, 0x44, 0x3e, 0x82, 0xb1, 0xa4, 0xa4, 0x26, 0x91, 0x1d, 0x10,
	0xcf, 0x81, 0x22, 0xb8, 0x6d, 0x96, 0x7f, 0x6a, 0x17, 0xb7, 0x07, 0xb8, 0x6d, 0x1e, 0xd5, 0xce,
	0x9f, 0x00, 0x9c, 0xd7, 0xff, 0x18, 0xd4, 0xa8, 0x76, 0x91, 0x27, 0xbb, 0x5a, 0xda, 0x17, 0x28,
	0x63, 0xdd, 0x07, 0x06, 0xe4, 0xcf, 0x90, 0xc7, 0x84, 0x55, 0xb0, 0x26, 0xeb, 0xee, 0x5f, 0xeb,
	0x3e, 0x75, 0xf7, 0x97, 0xe6, 0xe9, 0xd0, 0xb9, 0x48, 0x5f, 0xbd, 0x9d, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xbc, 0x6f, 0xa5, 0x6d, 0xe8, 0x00, 0x00, 0x00,
}
